# aws cloudformation describe-stack-events --stack-name ELBDemo --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`]|[].{Type:ResourceType,Reason:ResourceStatusReason}'
# [
#     {
#         "Reason":         "Security groups are not supported for load balancers with type 'network'",
#         "Type":           "AWS::ElasticLoadBalancingV2::LoadBalancer"
#     },
#     {
#         "Reason":         "Resource creation cancelled",
#         "Type":           "AWS::EC2::Subnet"
#     },
#     {
#         "Reason":         "Resource creation cancelled",
#         "Type":           "AWS::ElasticLoadBalancingV2::LoadBalancer"
#     },
#     {
#         "Reason":         "Resource creation cancelled",
#         "Type":           "AWS::EC2::Subnet"
#     },
#     {
#         "Reason":         "Resource creation cancelled",
#         "Type":           "AWS::EC2::Subnet"
#     },
#     {
#         "Reason":         "Resource creation cancelled",
#         "Type":           "AWS::EC2::Subnet"
#     },
#     {
#         "Reason":         "The subnet ID '10.0.20.0/24' does not exist",
#         "Type":           "AWS::EC2::SubnetRouteTableAssociation"
#     },
#     {
#         "Reason":         "The subnet ID '10.0.10.0/24' does not exist",
#         "Type":           "AWS::EC2::SubnetRouteTableAssociation"
#     }

AWSTemplateFormatVersion:   "2010-09-09"

Parameters:
  CIDR:
    Type:                   String
    Default:                10.0.0.0/16
  Private1:
    Type:                   String
    Default:                10.0.10.0/24
  Private2:
    Type:                   String
    Default:                10.0.20.0/24
  Public1:
    Type:                   String
    Default:                10.0.30.0/24
  Public2:
    Type:                   String
    Default:                10.0.40.0/24

Resources:

  ELBVPC:
    Type:                   AWS::EC2::VPC
    Properties:
      CidrBlock:            !Ref CIDR
      EnableDnsHostnames:   true
      InstanceTenancy:      default
      Tags:
        - Key:              Why
          Value:            ELBDemo

  ELBPrivate1:
    Type:                   "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:     !Select
        - 0
        - Fn::GetAZs:       !Ref 'AWS::Region'
      CidrBlock:            !Ref Private1
      Tags:
      - Key:                Why
        Value:              ELBDemo
      VpcId:                !Ref ELBVPC

  ELBPrivate2:
    Type:                   "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:     !Select
        - 1
        - Fn::GetAZs:       !Ref 'AWS::Region'
      CidrBlock:            !Ref Private2
      Tags:
      - Key:                Why
        Value:              ELBDemo
      VpcId:                !Ref ELBVPC

  ELBPublic1:
    Type:                   "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:     !Select
        - 0
        - Fn::GetAZs:       !Ref 'AWS::Region'
      CidrBlock:            !Ref Public1
      Tags:
      - Key:                Why
        Value:              ELBDemoTest
      VpcId:                !Ref ELBVPC

  ELBPublic2:
    Type:                   "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:     !Select
        - 1
        - Fn::GetAZs:       !Ref 'AWS::Region'
      CidrBlock:            !Ref Public2
      Tags:
      - Key:                Why
        Value:              ELBDemo
      VpcId:                !Ref ELBVPC

  NLB:
    Type:                   "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      LoadBalancerName:     NLB
      Subnets:
        - String
      Tags:
        - Key:              Why
          Value:            ELBDemo
      Type:                 network

  ALB:
    Type:                   "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref WebSG
      Subnets:
        - String
      Tags:
        - Key:              Why
          Value:            ELBDemo
      Type:                 application

  CLB:
    Type:                   "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      AvailabilityZones:
        Fn::GetAZs:         'AWS::Region'
      CrossZone:            true
      HealthCheck:
        HealthyThreshold:   2
        Interval:           10
        Target:             HTTP:80
        Timeout:            5
        UnhealthyThreshold: 2
      Instances:
        - !Ref TargetInstance
      Listeners:
        - InstancePort:     80
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol:         HTTP
      Scheme:               internet-facing,
      SecurityGroups:
        - !Ref WebSG
      Tags:
        - Key:              Why
          Value:            ELBDemo

  WebSG:
    Type:                   AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:     SG for Web Traffic
      SecurityGroupIngress:
        - IpProtocol:       tcp
          FromPort:         80
          ToPort:           80
          CidrIp:           0.0.0.0/0
      Tags:
        - Key:              Why
          Value:            ELBDemo
      VpcId:                !Ref ELBVPC

  SubnetRTAssociation1:
    Type:                   AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:         !Ref PrivateRT
      SubnetId:             !Ref Private1

  SubnetRTAssociation2:
    Type:                   AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:         !Ref PrivateRT
      SubnetId:             !Ref Private2

  PrivateRT:
    Type:                   AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key:              Why
          Value:            ELBDemo
      VpcId:                !Ref ELBVPC

  TargetInstance:
    Type:                   AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:     !Ref 'AWS::Region'
      ImageId:              String     # required

      InstanceType:         t2.micro     # optional
      SecurityGroupIds:     # optional, list of String
        - !Ref WebSG
      SubnetId:             !Ref Private1     # optional
      Tags:                 # optional, list of Tag
        - Key:              Why
          Value:            ELBDemo
      UserData:             String     # optional
